Edit: fixed issue in the example that relied on an inactive component.

The Always binding calls a controller method specified by the "call =
"insertControllerMethodHere"" at an interval specified in the second
parameter of the binding call, "delay = intDelayInMillisecondsHere"

It's called Always, because if one were to set the delay param to the
smallest non-negative and non-zero integer, it would always call the
method.

It can be used in conjunction with other bindings, as a secondary
binding, which would be the goal here, as it should logically call a
method to update the aspect of the model, while the primary binding
links the model/view part of that same aspect.

It's useful when the JFrame needs to update without user intervention
(i.e. an Event), as with a clock in the given example.

The Always binding works the same as the other bindings except for the
one following item:

Make sure that any applications that implement this binding set their
bindings variable equal to
"AlwaysExtensionBindings.alwaysExtensionBindings()" not the default
used in examples.

Clock/src/alwaysBindingDemo is the path where one can first find the
binding, secondly the java file which must be called for the new
bindings variable, and lastly an example that shows how this is
implemented in a text-based RGBClock
